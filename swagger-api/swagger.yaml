swagger: "2.0"
info:
  description: "Простейший API для управляения структурой пользователя User, включает в себя создание/получение/обновление/удаление"
  version: "1.0.0"
  title: "Swagger User CRUD"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "fry256@yandex.ru"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/api/"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Internal server error"
  /user/{uid}:
    get:
      tags:
      - "user"
      summary: "Get user by userID"
      description: ""
      operationId: "getUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        description: "The userID that needs to be fetched. Use 1 for testing. "
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid userID supplied"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        description: "userID that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        description: "The userID that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid userID supplied"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
definitions:
  User:
    type: "object"
    properties:
      uid:
        type: "integer"
        format: "int64"
        readOnly: true
      name:
        type: "string"
        minLength: 1
      birthDate:
        type: "string"
